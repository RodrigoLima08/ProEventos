{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet EventosComponent = class EventosComponent {\n  get filtroLista() {\n    return this._filtroListado;\n  }\n  set filtroLista(value) {\n    this._filtroListado = value;\n    this.eventosFiltrados = this.filtroLista ? this.filtrarEventos(this.filtroLista) : this.eventos;\n  }\n  filtrarEventos(filtrarPor) {\n    filtrarPor = filtrarPor.toLocaleLowerCase();\n    return this.eventos.filter(evento => evento.tema.toLocaleLowerCase().indexOf(filtrarPor) !== -1 || evento.local.toLocaleLowerCase().indexOf(filtrarPor) !== -1);\n  }\n  constructor(eventoService, modalService, toastr, spinner) {\n    this.eventoService = eventoService;\n    this.modalService = modalService;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.eventos = [];\n    this.eventosFiltrados = [];\n    this.widthImg = 150;\n    this.marginImg = 2;\n    this.showImg = true;\n    this._filtroListado = '';\n  }\n  ngOnInit() {\n    this.getEventos();\n    this.spinner.show();\n    /** spinner starts on init */\n  }\n\n  alterarImagem() {\n    this.showImg = !this.showImg;\n  }\n  getEventos() {\n    this.eventoService.getEventos().subscribe({\n      next: eventos => {\n        this.eventos = eventos;\n        this.eventosFiltrados = this.eventos;\n      },\n      error: error => {\n        this.spinner.hide();\n        this.toastr.error('Erro ao Carregar os Eventos', 'Erro!');\n      },\n      complete: () => this.spinner.hide()\n    });\n  }\n  openModal(template) {\n    this.modalRef = this.modalService.show(template, {\n      class: 'modal-sm'\n    });\n  }\n  confirm() {\n    this.modalRef?.hide();\n    this.toastr.success('O evento foi deletado com sucesso.', 'Deletado!');\n  }\n  decline() {\n    this.modalRef?.hide();\n  }\n};\nEventosComponent = __decorate([Component({\n  selector: 'app-eventos',\n  templateUrl: './eventos.component.html',\n  styleUrls: ['./eventos.component.scss']\n  //providers:[EventoService]\n})], EventosComponent);\nexport { EventosComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAA6B,eAAe;AAavD,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAU3B,IAAWC,WAAW;IAEpB,OAAO,IAAI,CAACC,cAAc;EAC5B;EAEA,IAAWD,WAAW,CAACE,KAAa;IAElC,IAAI,CAACD,cAAc,GAAEC,KAAK;IAC1B,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACH,WAAW,GAAE,IAAI,CAACI,cAAc,CAAC,IAAI,CAACJ,WAAW,CAAC,GAAG,IAAI,CAACK,OAAO;EAChG;EAEOD,cAAc,CAACE,UAAkB;IACtCA,UAAU,GAAGA,UAAU,CAACC,iBAAiB,EAAE;IAC3C,OAAO,IAAI,CAACF,OAAO,CAACG,MAAM,CACvBC,MAAW,IAAMA,MAAM,CAACC,IAAI,CAACH,iBAAiB,EAAE,CAACI,OAAO,CAACL,UAAU,CAAC,KAAK,CAAC,CAAC,IAC3EG,MAAM,CAACG,KAAK,CAACL,iBAAiB,EAAE,CAACI,OAAO,CAACL,UAAU,CAAC,KAAK,CAAC,CAAC,CAC7D;EACH;EAEAO,YACUC,aAA4B,EAC5BC,YAA4B,EAC5BC,MAAqB,EACrBC,OAA0B;IAH1B,kBAAa,GAAbH,aAAa;IACb,iBAAY,GAAZC,YAAY;IACZ,WAAM,GAANC,MAAM;IACN,YAAO,GAAPC,OAAO;IA9BV,YAAO,GAAc,EAAE;IACvB,qBAAgB,GAAY,EAAE;IAC9B,aAAQ,GAAG,GAAG;IACd,cAAS,GAAG,CAAC;IACb,YAAO,GAAG,IAAI;IACb,mBAAc,GAAG,EAAE;EA0BrB;EAECC,QAAQ;IACb,IAAI,CAACC,UAAU,EAAE;IACjB,IAAI,CAACF,OAAO,CAACG,IAAI,EAAE;IACnB;EAGF;;EAEOC,aAAa;IAClB,IAAI,CAACC,OAAO,GAAG,CAAC,IAAI,CAACA,OAAO;EAC9B;EAEOH,UAAU;IACf,IAAI,CAACL,aAAa,CAACK,UAAU,EAAE,CAACI,SAAS,CAAC;MACxCC,IAAI,EAAEnB,OAAiB,IAAI;QACzB,IAAI,CAACA,OAAO,GAAGA,OAAO;QACtB,IAAI,CAACF,gBAAgB,GAAG,IAAI,CAACE,OAAO;MACtC,CAAC;MACDoB,KAAK,EAAGA,KAAU,IAAI;QACpB,IAAI,CAACR,OAAO,CAACS,IAAI,EAAE;QACnB,IAAI,CAACV,MAAM,CAACS,KAAK,CAAC,6BAA6B,EAAE,OAAO,CAAC;MAC3D,CAAC;MACDE,QAAQ,EAAC,MAAM,IAAI,CAACV,OAAO,CAACS,IAAI;KAEnC,CAAC;EAGF;EACAE,SAAS,CAACC,QAA0B;IAClC,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACf,YAAY,CAACK,IAAI,CAACS,QAAQ,EAAE;MAACE,KAAK,EAAE;IAAU,CAAC,CAAC;EACvE;EAEAC,OAAO;IAEL,IAAI,CAACF,QAAQ,EAAEJ,IAAI,EAAE;IACrB,IAAI,CAACV,MAAM,CAACiB,OAAO,CAAC,oCAAoC,EAAE,WAAW,CAAC;EACxE;EAEAC,OAAO;IAEL,IAAI,CAACJ,QAAQ,EAAEJ,IAAI,EAAE;EACvB;CACD;AA9EY3B,gBAAgB,eAN5BD,SAAS,CAAC;EACTqC,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,0BAA0B;EACtC;CACD,CAAC,GACWtC,gBAAgB,CA8E5B;SA9EYA,gBAAgB","names":["Component","EventosComponent","filtroLista","_filtroListado","value","eventosFiltrados","filtrarEventos","eventos","filtrarPor","toLocaleLowerCase","filter","evento","tema","indexOf","local","constructor","eventoService","modalService","toastr","spinner","ngOnInit","getEventos","show","alterarImagem","showImg","subscribe","next","error","hide","complete","openModal","template","modalRef","class","confirm","success","decline","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\producao\\Desktop\\ProEventos\\front\\ProEventos-App\\src\\app\\components\\eventos\\eventos.component.ts"],"sourcesContent":["import { Component, OnInit, TemplateRef } from '@angular/core';\r\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { Evento } from '../../models/Evento';\r\nimport { EventoService } from '../../services/evento.service';\r\n\r\n@Component({\r\n  selector: 'app-eventos',\r\n  templateUrl: './eventos.component.html',\r\n  styleUrls: ['./eventos.component.scss'],\r\n  //providers:[EventoService]\r\n})\r\nexport class EventosComponent implements OnInit {\r\n  modalRef?: BsModalRef;\r\n\r\n  public eventos : Evento[] = [];\r\n  public eventosFiltrados: Evento[] =[];\r\n  public widthImg = 150;\r\n  public marginImg = 2;\r\n  public showImg = true;\r\n  private _filtroListado = '';\r\n\r\n  public get filtroLista(): string{\r\n\r\n    return this._filtroListado;\r\n  }\r\n\r\n  public set filtroLista(value: string){\r\n\r\n    this._filtroListado= value;\r\n    this.eventosFiltrados = this.filtroLista? this.filtrarEventos(this.filtroLista) : this.eventos;\r\n  }\r\n\r\n  public filtrarEventos(filtrarPor: string): Evento[]{\r\n    filtrarPor = filtrarPor.toLocaleLowerCase();\r\n    return this.eventos.filter(\r\n      (evento: any ) => evento.tema.toLocaleLowerCase().indexOf(filtrarPor) !== -1 ||\r\n       evento.local.toLocaleLowerCase().indexOf(filtrarPor) !== -1\r\n    );\r\n  }\r\n\r\n  constructor(\r\n    private eventoService: EventoService,\r\n    private modalService: BsModalService,\r\n    private toastr: ToastrService,\r\n    private spinner: NgxSpinnerService\r\n    ) { }\r\n\r\n  public ngOnInit():void {\r\n    this.getEventos()\r\n    this.spinner.show();\r\n    /** spinner starts on init */\r\n\r\n\r\n  }\r\n\r\n  public alterarImagem(): void{\r\n    this.showImg = !this.showImg;\r\n  }\r\n\r\n  public getEventos() : void {\r\n    this.eventoService.getEventos().subscribe({\r\n      next:(eventos: Evento[]) => {\r\n        this.eventos = eventos;\r\n        this.eventosFiltrados = this.eventos;\r\n      },\r\n      error: (error: any) => {\r\n        this.spinner.hide();\r\n        this.toastr.error('Erro ao Carregar os Eventos', 'Erro!');\r\n      },\r\n      complete:() => this.spinner.hide()\r\n\r\n  });\r\n\r\n\r\n  }\r\n  openModal(template: TemplateRef<any>): void {\r\n    this.modalRef = this.modalService.show(template, {class: 'modal-sm'});\r\n  }\r\n\r\n  confirm(): void {\r\n\r\n    this.modalRef?.hide();\r\n    this.toastr.success('O evento foi deletado com sucesso.', 'Deletado!');\r\n  }\r\n\r\n  decline(): void {\r\n\r\n    this.modalRef?.hide();\r\n  }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}